MVC
Model -> Data that you want to use in your page
View -> HTML CSS JavaScript + Razor Syntax (HTML with some C#)
Controller -> Jobs
		Action methods

Routes
URL https://www.example.com/jobs/index 
URL  https://www.example.com/jobs/details/6 

VIEW -> list of jobs that you can apply
MODEL -> List<Job>
Models based on what the requirement needs 

public class Job {
	JobCode
	Title
	Description
	Salary
	DatePosted
	StartDate
}

Entity Framework

https://www.example.com/submissions/index -> List of submissions

https://www.example.com/profile/details/3

Entities -> will have objects tthat represent our DB tables
Models -> will have objcts that represent your UI

Services -> Domain/Business Logic

GetJobById
Send Confirmation Email
Get All Jobs
Create Submission

Controller => Services => Repositories (EF Core or Dapper or ADO.NET) -> Databasee




ADO.NET => lower level API -> write lots of code

Dapper is microORM from StackOverflow (collection of extension methods)
Existing database
Worthwind, AdventureWorks
//fast if you have a database

var employees = db.connection.execute <Employees>("SELECT * FROM Employee");
var employees = db.connection.execute <Employees>("usp_GetEmployee");

ORM => Object Relational Mapper
data access code simpler and write less amount of code


Entity Framework -> //saves alot of time in creating/accessing the database
1. You can create complete DB using C# code with code-first approach, concept called Migrations
2. You can access database and CRUD with just C# (LINQ) without writing any SQL
	Dapper/ADO.NET: SELECT * from Jobs where salary > 60000
	EF:             Jobs.where(e => e.Salary > 60000).ToList();
					Jobs.ToList().where(e => e.Salary > 60000).ToList();
					SELECT * from Jobs
					then the filter > 60000 is going to happen in memory
3. Can map the data to C# Entities


Jobs => Jobs info Id, Title, Desc, JobCode, 
Candidate => Canidates
Submissions => When Candidates apply for job
JobStatusLookup => Open, Closed, pending, postponed


Step 1 : Install EF Core tools package globally
Step 2 : First create an Entity -> C# object that represents a table in the database
Step 3 : Install required EF Core Packages from Nuget in projects
			Microsoft.EntityFrameworkCore.SqlServer
			Microsoft.EntityFrameworkCore.Design
Step 4 : In EF we have 2 very important classes
		 DbContext -> represents your database
		 DbSet => Represent your tables
Step 5 : Create the DbContext class and DbSet properties for the project
Step 6 : Create the Database connection string, and establish that connectionString with the DbContext
		   Keep ConnectionStrings if locally in the project in appsettings.jsonn
		   locally - User Secrets
		   Azure Server - Azure KeyVault **

Step 7 : Establish that connectionString with the DbContext using DI using thhe AddDbContext method
Step 8 : Create your first Migration


Step 9 : Always, check your migration fiile and see if it has things that you are trying to create.

Step 10 : Apply the migration using command
	dotenet ef database update

Step 11 : To Model your database with rules, contrainsts etc we can do in 2 ways
	1. Data Annotations
	2. Fluent API



